source('~/.active-rstudio-document', echo=TRUE)
Estrogen <- addNA(annotations$Estrogen.Receptor[Patient])
Estrogen_bin <- dplyr::recode_factor(Estrogen, "indeterminate" = NA_character_)
library(caret)
install.packages("caret")
PAM50 ~ read_counts .
PAM50 ~ read_counts.
summary(PAM50 ~ read_counts.)
model <- naiveBayes(PAM50 ~ ., data = read_counts)
install.packages("e1071")
library(e1071)
model <- naiveBayes(PAM50 ~ ., data = read_counts)
model <- naiveBayes(PAM50 ~ ., data = t(read_counts))
dge <- DGEList(counts=data.matrix(read_counts))
keep <- filterByExpr(dge)
dge <- dge[keep, , keep.lib.sizes=FALSE]
dge <- calcNormFactors(dge)
design <- model.matrix(~ addNA(PAM50))
v <- voom(dge,design,plot=TRUE)
linearfit = lmFit(v$E,design)
eBfit = eBayes(linearfit)
volcanoplot(eBfit,coef=2,style="B-statistic")
eBfit
topTable(eBfit)
topTable(eBfit, number=10)
topTable(eBfit, number=2)
rownames(topTable(eBfit, number=2))
top_genes <- rownames(topTable(eBfit, number=2))
read_counts
read_counts[top_genes]
read_counts[top_genes,]
head(read_counts[top_genes,])
top_genes <- rownames(topTable(eBfit, number=2))
model <- naiveBayes(PAM50 ~ ., data = t(read_counts[top_genes,]))
summary(model)
merge(t(read_counts[top_genes,]), PAM50)
merge(t(read_counts[top_genes,]), data.frame(PAM50))
PAM50
t(read_counts[top_genes,])
merge(t(read_counts[top_genes,]), data.frame(PAM50))
concat([t(read_counts[top_genes,]), data.frame(PAM50)])
pd.concat([t(read_counts[top_genes,]), data.frame(PAM50)])
reads <- t(read_counts[top_genes,])t(read)
reads <- t(read_counts[top_genes,])
reads$PAM50 = PAM50
reads
reads <- t(read_counts[top_genes,])
reads
reads$PAM50 <- PAM50
reads
top_genes <- rownames(topTable(eBfit, number=2))
reads <- t(read_counts[top_genes,])
reads
reads$PAM50 <- as.numeric(PAM50)
reads <- transpose(read_counts[top_genes,])
reads <- as.data.frame(transpose(read_counts[top_genes,]))
reads <- as.data.frame(t(read_counts[top_genes,]))
reads
reads$PAM50 <- PAM50
reads
model <- naiveBayes(PAM50 ~ ., data = reads)
summary(model)
reads <- as.data.frame(t(read_counts[top_genes,]))
reads$PAM50 <- PAM50
reads
reads <- reads[!is.na(PAM50)]
reads <- reads[!is.na(PAM50),]
reads
model <- naiveBayes(PAM50 ~ ., data = reads)
reads <- as.data.frame(t(read_counts[top_genes,]))
reads$PAM50 <- PAM50
reads
reads_train <- reads[!is.na(PAM50),]
reads_test <- reads[is.na(PAM50),]
model <- naiveBayes(PAM50 ~ ., data = reads_train)
predict(model, reads_test)
results <- predict(model, reads_test)
top_genes <- rownames(topTable(eBfit, number=30))
reads <- as.data.frame(t(read_counts[top_genes,]))
reads$PAM50 <- PAM50
reads_train <- reads[!is.na(PAM50),]
reads_test <- reads[is.na(PAM50),]
model <- naiveBayes(PAM50 ~ ., data = reads_train)
results <- predict(model, reads_test)
summary(model)
install.packages("caTools")
library(caTools)
top_genes <- rownames(topTable(eBfit, number=30))
reads <- as.data.frame(t(read_counts[top_genes,]))
reads$PAM50 <- PAM50
labeled <- reads[!is.na(PAM50),]
unlabeled <- reads[is.na(PAM50),]
sample = sample.split(labeled$PAM50, SplitRatio = .75)
train = subset(labeled, sample == TRUE)
test  = subset(labeled, sample == FALSE)
model <- naiveBayes(PAM50 ~ ., data = train)
results <- predict(model, test)
accuracy(model, test)
install.packages("forecast")
library(forecast)
accuracy(model, test)
install.packages("MLmetrics")
library(MLmetrics)
accuracy(results, test$PAM50)
results <- predict(model, test)
accuracy(results, test$PAM50)
Accuracy(results, test$PAM50)
top_genes <- rownames(topTable(eBfit, number=2))
reads <- as.data.frame(t(read_counts[top_genes,]))
reads$PAM50 <- PAM50
labeled <- reads[!is.na(PAM50),]
unlabeled <- reads[is.na(PAM50),]
sample = sample.split(labeled$PAM50, SplitRatio = .75)
train = subset(labeled, sample == TRUE)
test  = subset(labeled, sample == FALSE)
model <- naiveBayes(PAM50 ~ ., data = train)
results <- predict(model, test)
Accuracy(results, test$PAM50)
top_genes <- rownames(topTable(eBfit, number=50))
reads <- as.data.frame(t(read_counts[top_genes,]))
reads$PAM50 <- PAM50
labeled <- reads[!is.na(PAM50),]
unlabeled <- reads[is.na(PAM50),]
sample = sample.split(labeled$PAM50, SplitRatio = .75)
train = subset(labeled, sample == TRUE)
test  = subset(labeled, sample == FALSE)
model <- naiveBayes(PAM50 ~ ., data = train)
results <- predict(model, test)
Accuracy(results, test$PAM50)
library(class)
pr <- knn(train, test, cl=PAM50,k=7)
pr <- knn(train, test, cl=train$PAM50, k=7)
train
pr <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=7)
pr
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=7)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=3)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=11)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=23)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=9)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=5)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=10)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=12)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=13)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=15)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=10)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=11)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=11)
Accuracy(results, test$PAM50)
top_genes <- rownames(topTable(eBfit, number=50))
reads <- as.data.frame(t(read_counts[top_genes,]))
reads$PAM50 <- PAM50
labeled <- reads[!is.na(PAM50),]
unlabeled <- reads[is.na(PAM50),]
sample = sample.split(labeled$PAM50, SplitRatio = .75)
train = subset(labeled, sample == TRUE)
test  = subset(labeled, sample == FALSE)
model <- naiveBayes(PAM50 ~ ., data = train)
results <- predict(model, test)
Accuracy(results, test$PAM50)
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=11)
Accuracy(results, test$PAM50)
confusionMatrix(results, test$PAM50)
confusionMatrix(results, test$PAM50)
install.packages("caret")
library(caret)
confusionMatrix(results, test$PAM50)
a <- confusionMatrix(results, test$PAM50)
a$table
library(reshape2)
ggplot(data = melt(a$table), aes(x=Var1, y=Var2, fill=value)) + geom_tile()
melt(a$table)
ggplot(data = melt(a$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile()
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile()
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile()
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile()
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile()
top_genes <- rownames(topTable(eBfit, number=50))
reads <- as.data.frame(t(read_counts[top_genes,]))
reads$PAM50 <- PAM50
labeled <- reads[!is.na(PAM50),]
unlabeled <- reads[is.na(PAM50),]
sample = sample.split(labeled$PAM50, SplitRatio = .75)
train = subset(labeled, sample == TRUE)
test  = subset(labeled, sample == FALSE)
model <- naiveBayes(PAM50 ~ ., data = train)
results <- predict(model, test)
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile()
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=11)
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile()
model <- naiveBayes(PAM50 ~ ., data = train)
results <- predict(model, test)
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile()
top_genes <- rownames(topTable(eBfit, number=20))
reads <- as.data.frame(t(read_counts[top_genes,]))
reads$PAM50 <- PAM50
labeled <- reads[!is.na(PAM50),]
unlabeled <- reads[is.na(PAM50),]
sample = sample.split(labeled$PAM50, SplitRatio = .8)
train = subset(labeled, sample == TRUE)
test  = subset(labeled, sample == FALSE)
model <- naiveBayes(PAM50 ~ ., data = train)
results <- predict(model, test)
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile()
results <- knn(train[, names(train) != "PAM50"], test[, names(test) != "PAM50"], cl=train$PAM50, k=11)
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile()
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile() + scale_color_brewer(palette = "Sequential")
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile() + scale_color_brewer(palette = "Spectral")
ggplot(data = melt(confusionMatrix(results, test$PAM50)$table), aes(x=Prediction, y=Reference, fill=value)) + geom_tile() + scale_fill_brewer(palette = "Spectral")
install.packages(c("caret", "caTools", "e1071", "ensr", "MLmetrics"))
